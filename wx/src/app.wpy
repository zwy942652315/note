<style lang="less">
.container {
  wdith: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
.ui-list__none{
  text-align: center;
  padding: 10rpx 0;
  font-size: 30rpx;
}
.clearfix:after {
    display: block;
    clear: both;
    content: "";
    visibility: hidden;
    height: 0;
}
.clearfix {
    zoom: 1;
}
.fl{
  float: left;
}
.fr{
  float: right;
}
.block{
  display: block;
}
.none{
  display: none;
}
.mainColor{
  color: #32b36e !important;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'


export default class extends wepy.app {
  config = {
    pages: [
      'pages/note_list',
      'pages/note_add',
      'pages/notebook',
      'pages/toast'
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: 'WeChat',
      navigationBarTextStyle: 'black',
      enablePullDownRefresh: true
    },
    // tabBar: {
    //   "selectedColor": "#32b36e",
    //   "list": [{
    //     "pagePath": "pages/note_list",
    //     "text": "所有",
    //     "iconPath": "/assets/images/note.png",
    //     "selectedIconPath": "/assets/images/note_select.png",
    //     "selectedColor": "#32b36e",
    //     "pageTum": "redirect",
    //     active: true
    //   }, {
    //     "pagePath": "pages/note_add",
    //     "text": "新增",
    //     "iconPath": "/assets/images/add.png",
    //     "selectedIconPath": "/assets/images/add_select.png",
    //     "selectedColor": "#32b36e",
    //     "pageTum": "navigate",
    //     active: false
    //   }, {
    //     "pagePath": "pages/note_add",
    //     "text": "笔记本",
    //     "iconPath": "/assets/images/doc.png",
    //     "selectedIconPath": "/assets/images/doc_select.png",
    //     "selectedColor": "#32b36e",
    //     "pageTum": "redirect",
    //     active: false
    //   }]
    // }
  }

  globalData = {
    userInfo: null,
    tabIndex: null,
    notebook_id: null
  }

  constructor () {
    super()
    this.use('requestfix')
  }

  onLaunch() {
    this.testAsync()
  }

  sleep (s) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve('promise resolved')
      }, s * 1000)
    })
  }

  async testAsync () {
    const data = await this.sleep(3)
    console.log(data)
  }

  getUserInfo(cb) {
    const that = this
    if (this.globalData.userInfo) {
      return this.globalData.userInfo
    }
    wepy.getUserInfo({
      success (res) {
        that.globalData.userInfo = res.userInfo
        cb && cb(res.userInfo)
      }
    })
  }

}
</script>
