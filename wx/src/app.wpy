<style lang="less">
.container {
  wdith: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
.ui-list__none{
  text-align: center;
  padding: 10rpx 0;
  font-size: 30rpx;
}
.clearfix:after {
    display: block;
    clear: both;
    content: "";
    visibility: hidden;
    height: 0;
}
.clearfix {
    zoom: 1;
}
.fl{
  float: left;
}
.fr{
  float: right;
}
.block{
  display: block;
}
.none{
  display: none;
}
.mainColor{
  color: #32b36e !important;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'
import _g from './common/util'


export default class extends wepy.app {
  config = {
    pages: [
      'pages/note_list',
      'pages/note_add',
      'pages/notebook',
      'pages/note_my'
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: 'WeChat',
      navigationBarTextStyle: 'black',
      enablePullDownRefresh: true
    }
  }

  globalData = {
    userInfo: null,
    tabIndex: null,
    notebook_id: null,
    authorized: false
  }

  constructor () {
    super()
    this.use('requestfix')
  }

  onLaunch() {
    var self  = this;
    self.testAsync();
    wx.login({
      success: function(res) {
        console.log('登录成功！')
        console.log(res);
        var code = res.code;
        if (code) {
          self.getUserInfo((userInfo)=>{
            console.log('await getUserInfo')
            console.log(userInfo)

            _g.ajax('post', '/user/login',{code: code},function(res){
              console.log('dfdfdfdfd')
              console.log(res)
              if (res.data.success) {
                _g.toast(res.data.message);
                self.globalData.authorized = true;
                wx.setStorageSync('session_key', res.data.object.session_key);
                wx.setStorageSync('openid', res.data.object.openid);
              } else {
                self.globalData.authorized = true;
              }
            },function(err){
              console.log('err');
              console.log(err);
              self.globalData.authorized = true;
            });
          });
        }
      }
    });
  }

  sleep (s) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve('promise resolved')
      }, s * 1000)
    })
  }

  async testAsync () {
    const data = await this.sleep(3)
    console.log(data)
  }

  getUserInfo(cb) {
    const self = this
    if (this.globalData.userInfo) {
      return this.globalData.userInfo
    }
    wx.getSetting({
      success: function(res){
        console.log('授权信息：')
        console.log(res)
        if (res.authSetting['scope.userInfo']) {
          wx.getUserInfo({
            success: function(res) {
              console.log('用户信息-------：')
              console.log(res)
              self.globalData.userInfo = res.userInfo
              cb && cb(res.userInfo)
            }
          });
        }
      }
    });
  }

}
</script>
