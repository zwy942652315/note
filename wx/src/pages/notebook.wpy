<style lang="less">
  .ui-note__nolist{
    text-align: center;
    margin: 100rpx auto;
    image{
      width: 100rpx;
      height: 100rpx;
    }
  }
  .ui-notebook__addbtn{
    position: fixed;
    left: 50%;
    bottom: 130rpx;
    transform: translate(-50%);
    image{
      width: 100rpx;
      height: 100rpx;
    }
  }
  .ui-notebook__input{
    width: 80%;
    margin: 50rpx auto;
    display: block;
    border-bottom: 1rpx solid #ccc;
  }
</style>
<template>
  <view class="container" wx:if="{{list && list.length > 0}}">
    <scroll-view scroll-y style="height:{{height}}px" bindscrolltolower="lower" scroll-top="{{scrollTop}}">
      <refresh :scrollTop.sync="scrollTop">
        <view slot="refresh-content" style="margin-top:45px;">
          <notebooklist :list.sync="list" @getNoteBookList.user="getNoteBookList" @deleteNoteBook.user="deleteNoteBook" @editNoteBook.user="editNoteBook"></notebooklist>
          <view class="{{isBottom ? 'block' : 'none'}} ui-list__none">没有更多了</view>
        </view>
      </refresh>
    </scroll-view>
  </view>

  <tabBar :tabBar="tabBar"></tabBar>

  <view class="ui-note__nolist" wx:if="{{list && list.length == 0}}" @tap="addNoteBook">
    <view class="block"><image src="../assets/images/note_book.png"></image></view>
    <view class="block">暂无笔记本，点击添加笔记本</view>
  </view>

  <view class="ui-notebook__addbtn" @tap="addNoteBook">
    <image src="../assets/images/add_notebook.png"></image>
  </view>

  <modal title="新建笔记本" :modalHidden.sync="modalHidden" @onModalCancel.user="onModalCancel" @onModalConfirm.user="onModalConfirm" @onBindInput.user="onBindInput">
    <input class="ui-notebook__input" placeholder="请输入名称" value="{{bookname}}" bindinput="onBindInput"></input>
  </modal>

</template>

<script>
  import wepy from 'wepy'
  import notebooklist from '@/components/notebooklist'
  import tabBar from '@/components/tabBar'
  import modal from '@/components/modal'
  import utils from '../common/util'
  import _g from '../common/util'
  import Refresh from 'wepy-scroll-view-refresh'


  export default class Notebook extends wepy.page {
    config = {
      navigationBarTitleText: '笔记本列表'
    }
    components = {
      notebooklist: notebooklist,
      tabBar: tabBar,
      modal: modal,
      refresh: Refresh
    }

    data = {
      height: '',
      scrollTop: 0,
      page: 1,
      pageSize: 10,
      isBottom: false,
      list: [],
      notebookId: '',
      bookname: '',
      modalHidden: true,
      moveNoteId: '',
      tabBar: {
        "selectedColor": "#32b36e",
        "list": [
          {
            "pagePath": "../pages/note_list",
            "text": "所有",
            "iconPath": "/assets/images/note.png",
            "selectedIconPath": "/assets/images/note_select.png",
            "selectedColor": "#32b36e",
            "pageTum": "redirect",
            "active": false
          }, 
          {
            "pagePath": "../pages/note_add",
            "text": "新增",
            "iconPath": "/assets/images/add.png",
            "selectedIconPath": "/assets/images/add_select.png",
            "selectedColor": "#32b36e",
            "pageTum": "navigate",
            "active": false
          }, 
          {
            "pagePath": "../pages/notebook",
            "text": "笔记本",
            "iconPath": "/assets/images/doc.png",
            "selectedIconPath": "/assets/images/doc_select.png",
            "selectedColor": "#32b36e",
            "pageTum": "redirect",
            "active": true
          },
          {
            "pagePath": "../pages/note_my",
            "text": "我的",
            "iconPath": "/assets/images/my.png",
            "selectedIconPath": "/assets/images/my_select.png",
            "selectedColor": "#32b36e",
            "pageTum": "redirect",
            "active": false
          }
        ]
      }
    }

    events = {
      'refresh': (data) => {
        var self = this;
        console.log('data: ', data)
        setTimeout(() => {
          self.getList(1);
          self.$invoke('refresh', 'reset')
        }, 1500)
      }
    }

    computed = {
      now () {
        return +new Date()
      }
    }
 

    editNote (url,data) {
      var self = this;
      _g.ajax('post', url, data,function(res){
        if (res.data.success) {
          _g.toast(res.data.message);
          self.getList(self.page);
        }
      },function(err){
        console.log('err');
        console.log(err);
      });
    }

    methods = {
      onShareAppMessage: function (res) {
        if (res.from === 'button') {
          // 来自页面内转发按钮
          console.log(res.target)
        }
        return {
          title: '个人笔记',
          path: '/pages/note_list',
          imageUrl: '/assets/images/sharenote.png'
        }
      },
      lower: function(e) {
        console.log('底部')
        console.log(e)
        this.page++;
        if (!this.isBottom) {
          this.getList(this.page);
        }
      },
      getNoteBookList (id) {
        this.$parent.globalData.notebook_id = id;
        console.log(this.moveNoteId)
        if (this.moveNoteId) {
          wx.navigateTo({
            url: 'note_move_here?notebook_id=' + id + '&moveNoteId=' + this.moveNoteId
          })
        } else {
          wx.navigateTo({
            url: 'note_list?id=' + id
          })
        }
      },
      deleteNoteBook (id) {
        var self = this;
        _g.ajax('post', '/note/delete_note_book',{notebookId: id},function(res){
          if (res.data.success) {
            _g.toast(res.data.message);
            self.getList(self.page);
          }
        },function(err){
          console.log('err');
          console.log(err);
        });
      },
      editNoteBook (id) {
        console.log(this.$parent.globalData)
        var self = this;
        this.modalHidden = false;
        _g.ajax('get', '/note/get_note_book',{notebookId: id},function(res){
          if (res.data.success) {
            self.bookname = res.data.object.bookname;
            self.notebookId = res.data.object._id;
            self.$apply();
          }
        },function(err){
          console.log('err');
          console.log(err);
        });
      },
      addNote () {
        wx.navigateTo({
          url: 'note_add'
        })
      },
      addNoteBook () {
        this.notebookId = '';
        this.bookname = '';
        this.modalHidden = false;
      },
      onModalConfirm () {
        var self = this;
        self.modalHidden = true;
        if (!self.bookname) {
          _g.toast('笔记本名称不能为空');
          return;
        }
        if (self.notebookId) {
          self.editNote('/note/edit_note_book', {bookname: self.bookname, notebookId: self.notebookId});
        } else {
          self.editNote('/note/add_note_book', {bookname: self.bookname});
        }
      },
      onModalCancel () {
        this.modalHidden = true;
      },
      onBindInput (e) {
        this.bookname = e.detail.value;
      }
    }

    getList (page) {
      var self = this;
      _g.ajax('get', '/note/get_all_notebook',{page: page, pageSize: self.pageSize},function(res){
        if (res.data.object && res.data.object.length ===0) {
          self.isBottom = true;
        }

        wx.showLoading({ //期间为了显示效果可以添加一个过度的弹出框提示“加载中”  
          title: '加载中',
          icon: 'loading',
        });
        if (self.page == 1) {
          self.list = res.data.object;
        } else {
          self.list = self.list.concat(res.data.object);
        }
        for( var v of self.list) {
          v.createtime = _g.getTimes(v.createtime);
        }
        setTimeout(() => {
          wx.hideLoading()
        }, 1000)
        self.$apply();
      },function(err){
        console.log('err');
        console.log(err);
      });
    }

    onShow () {
      var self = this;
    }

    onLoad(option) {
      console.log(option)
      this.moveNoteId = option.moveNoteId ? option.moveNoteId : '';
      this.getList(1);
      wx.getSystemInfo({
        success: (res) => {
          this.height = res.windowHeight - 61;
        }
      })
    }
  }
</script>
